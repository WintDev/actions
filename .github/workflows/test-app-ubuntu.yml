name: test-app-ubuntu
on:
  workflow_call:
    inputs:
      solution-name:
        description: 'The name of the solution to build.'
        required: true
        type: string
      test-sources:
        description: 'The comma-separated list of path/testassembly to run as test(s). If not specified, the param solution-name is used as the source of a single test.'
        required: false
        type: string
      warning-level:
        description: 'The warning level of the restore and build actions. If not specified, the default value 0, indicating that no warning messages are displayed, is used.'
        required: false
        default: '0'
        type: string
      console-logger-parameters:
        description: 'The parameters passed to the console logger in restore and build commands. If not specified, the default value ErrorsOnly is used.'
        required: false
        default: 'ErrorsOnly'
        type: string
      build-verbosity:
        required: false
        default: 'quiet'
        type: string
      test-verbosity:
        description: 'The verbosity of the test console logger. If not specified, the default value quiet is used.'
        required: false
        default: 'quiet'
        type: string
      dotnet-version:
        description: 'The main version of .net to install. The default value is 8.'
        required: false
        default: '8'
        type: string
      integration-test-environment:
        description: 'true to run tests marked as integration tests; otherwise, false. The default value is false.'
        required: false
        default: false
        type: boolean
      env-vars-artifacts:
        description: The name of an uploaded artifacts txt file containing a list of environment variable(s) used in the integration test environment. new-line-separated values in 'key=value' format. Use an empty string if no environment variables is required for integration testing. Prefix value with 'secretref:' to reference a secret.
        required: false
        default: ''
        type: string
      env-vars-artifacts-file-name:
        description: The name of the env-vars txt file in the env-vars-artifacts artifacts. If not specified, the default value env-vars.txt is used
        required: false
        default: 'env-vars.txt'
        type: string
      env-vars-artifacts-enctypted:
        description: 'true if the the uploaded environment variable artifacts are encrypted; otherwise, false. If true, ensure the  env-vars-cipher, env-vars-key-derivation and the secret encrypt_key are specified accordingly.'
        required: false
        default: false
        type: boolean
      env-vars-cipher:
        type: string
        description: 'The name of the resource group where the key vault that will be used by the app deployed to production resides.'
        required: false
        default: aes-256-cbc
      env-vars-key-derivation:
        description: 'The key derivation algorithm to use. The default value is PBKDF2 (Password-Based Key Derivation Function 2).'
        required: false
        default: pbkdf2
        type: string
  
      test-filter:
        required: false
        default: 'trigger!=manual'
        type: string
      coverage-report-retention-days:
        description: 'The number of days to retain the code coverage report artifact named coverage-report. If a number less than 1 is specified, no code coverage report artifact is created. The default value is 1 day(s).'
        required: false
        default: 1
        type: number
      coverage-persist:
        description: 'true if coverage reports would be persisted to blob storage regardless of the ref.; otherwise, false to let the ref. decide. The default value is false.'
        type: boolean
        default: false
        required: false

    secrets:
      nuget-read-pat:
        description: 'The Personal Access Token used to access the WintDev internal nuget feed when restoring.'
        required: true
      azure-credentials:
        description: 'The credentials used to authenticate against azure. Note: requires claims to manage user-assigned managed identity.'
        required: false
      encrypt_key:
        description: 'The cryptographic key used when decrypting the environment variables artifacts contents.'
        required: false

jobs:
  test:
    name: Build and Test (${{ inputs.solution-name }})
    runs-on: ubuntu-latest
    continue-on-error: false
    outputs:
      head_branch: ${{ steps.get_head_branch_name.outputs.head_branch }}

    env:
      CONFIGURATION: release
      WINT_GITHUB_NUGET_SOURCE_URL: 'https://nuget.pkg.github.com/WintDev/index.json'
      ENV_VARS_ARTIFACTS_PATH: env-vars
      COVERAGE_REPORT_PATH: 'coverage-report'
      COVERAGE_REPORT_ARTIFACT: 'coverage-report'
      ENV_VARS_FILE: '9149C33B-FF9F-42F4-80B3-173C9E66C2D4.txt'

    steps:
      - name: get_test_sources
        id: get_test_sources
        shell: bash
        run: |
          if [[ "${{ inputs.test-sources }}" != ""}} ]]
          then
            echo "Using test-sources as test source"
            TEST_SOURCES=${{ inputs.test-sources }}
          else
            echo "Using solution-name as test source"
            TEST_SOURCES=${{ inputs.solution-name }}
          fi
          echo "test_sources=$TEST_SOURCES" >> $GITHUB_OUTPUT

      - name: Install dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            ${{ inputs.dotnet-version }}.0.x

      - name: Add GitHub Nuget registry
        run: |
          dotnet nuget add source --username WintDev --password ${{ secrets.nuget-read-pat }} --store-password-in-clear-text --name WintDev "${{ env.WINT_GITHUB_NUGET_SOURCE_URL }}"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          show-progress: false

      - name: Get HEAD branch name
        id: get_head_branch_name
        run: |
          HEAD_BRANCH=$(git remote show origin | grep 'HEAD branch' | cut -d' ' -f5)
          echo "head_branch=$HEAD_BRANCH" >> $GITHUB_OUTPUT

      - name: Setup Integration test environment
        run: |
          echo "WINT_INTEGRATION_TEST_ENVIRONMENT=${{ inputs.integration-test-environment }}" >> $GITHUB_ENV

      - name: login to azure
        if: ${{ inputs.integration-test-environment == true }}
        uses: azure/login@v1
        with:
          creds: ${{ secrets.azure-credentials }}

      - name: Download environment variables artifacts
        if: ${{ inputs.env-vars-artifacts != '' }}
        uses: actions/download-artifact@v2
        with:
          name: ${{ inputs.env-vars-artifacts }}
          path: ${{ env.ENV_VARS_ARTIFACTS_PATH }}
      
      - name: Decrypt environment variables
        if: ${{ inputs.env-vars-artifacts != '' && inputs.env-vars-artifacts-enctypted == true }}
        shell: bash
        run: |
          BASE_64=$(cat ${{ env.ENV_VARS_ARTIFACTS_PATH }}/${{ inputs.env-vars-artifacts-file-name }})
          echo "base64: $BASE_64"
          # echo "$BASE_64" | base64 --decode > /tmp/encrypted.bin

          # BINARY_ENCRYPTED=$(echo "$BASE_64" | base64 --decode)
          # echo "binary: $BINARY_ENCRYPTED"
          # # ENV_VARS_DECRYPTED=$(echo -n "$BINARY_ENCRYPTED" | openssl enc -${{ inputs.env-vars-cipher }} -${{ inputs.env-vars-key-derivation }} -d -salt -k "${{ secrets.encrypt_key }}");
          # openssl enc -${{ inputs.env-vars-cipher }} -${{ inputs.env-vars-key-derivation }} -d -salt -k "${{ secrets.encrypt_key }}" -in /tmp/encrypted.bin -out ${{ env.ENV_VARS_FILE }}
          openssl enc -${{ inputs.env-vars-cipher }} -${{ inputs.env-vars-key-derivation }} -d -base64 -A -salt -k "${{ secrets.DECRYPTION_KEY }}" -in ${{ env.ENV_VARS_ARTIFACTS_PATH }}/${{ inputs.env-vars-artifacts-file-name }} -out ${{ env.ENV_VARS_FILE }}

      - name: Map environment variable artifacts file
        if: ${{ inputs.env-vars-artifacts != '' && inputs.env-vars-artifacts-enctypted == false }}
        shell: bash
        run: |
          echo "ENV_VARS_FILE=${{ env.ENV_VARS_ARTIFACTS_PATH }}/${{ inputs.env-vars-artifacts-file-name }}" >> $GITHUB_ENV

      - name: Set test environment variables
        if: ${{ inputs.env-vars-artifacts != '' }}
        shell: bash
        run: |
          while IFS= read -r line; do
            key=${line%%=*}
            value=${line#*=}
            echo "$key=$value" >> $GITHUB_ENV
          done < ${{ env.ENV_VARS_FILE }}
  
      # - name: Set test environment variables
      #   if: ${{ inputs.env-vars-artifacts != '' }}
      #   shell: bash
      #   run: |
      #     while IFS= read -r line; do
      #       key=${line%%=*}
      #       value=${line#*=}
      #       echo "$key=$value" >> $GITHUB_ENV
      #     done < ${{ env.ENV_VARS_ARTIFACTS_PATH }}/${{ inputs.env-vars-artifacts-file-name }}

      - name: Get nuget cache key suffix
        id: get_cache_key
        shell: bash
        run: |
          HASH=${{ hashFiles('**/packages.lock.json') }}
          echo "hash=$HASH" >> $GITHUB_OUTPUT

      - name: Cache nuget restore artifacts
        if: ${{ steps.get_cache_key.outputs.hash != '' }} 
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ steps.get_cache_key.outputs.hash }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore
        run: dotnet restore ${{ inputs.solution-name }} --locked-mode --verbosity ${{ inputs.build-verbosity }} --property WarningLevel=${{ inputs.warning-level }} /clp:${{ inputs.console-logger-parameters }}

      - name: Build
        run: dotnet build ${{ inputs.solution-name }} --configuration ${{ env.CONFIGURATION }} --verbosity ${{ inputs.build-verbosity }} --property WarningLevel=${{ inputs.warning-level }} /clp:${{ inputs.console-logger-parameters }} --no-restore

      - name: Test
        shell: bash
        run: |
          dotnet test ${{ inputs.solution-name }} \
          --filter "${{ inputs.test-filter }}" \
          --configuration ${{ env.CONFIGURATION }} \
          --logger:"console;verbosity=${{ inputs.test-verbosity }};consoleLoggerParameters=${{ inputs.console-logger-parameters }}" \
          --collect:"XPlat Code Coverage" \
          /p:ExcludeByAttribute="GeneratedCodeAttribute" \
          --no-build

      - name: Upload Coverage Artifacts
        if: ${{ inputs.coverage-report-retention-days >= 1 }}
        uses: actions/upload-artifact@v2
        with:
          name: '${{ env.COVERAGE_REPORT_ARTIFACT }}-${{ github.run_id }}'
          path: '**/*.cobertura.xml'
          retention-days: ${{ inputs.coverage-report-retention-days }}

  report_generator:
    name: 'Create coverage report'
    if: ${{ (github.ref_name == needs.test.outputs.head_branch || inputs.coverage-persist ) && inputs.coverage-report-retention-days >= 1 }}
    runs-on: ubuntu-latest
    needs: test
    env:
      COVERAGE_REPORT_ARTIFACT: 'coverage-report'
      SOURCE_PATH: report_data
      REPORT_PATH: results
      REPORT_ARTIFACTS_NAME: report-generator-results
      HISTORY_ARTIFACTS_NAME: report-generator-history
      HISTORY_PATH: report-generator-history

    steps:
      - name: Install dotnet-reportgenerator
        run: |
          dotnet tool install --global dotnet-reportgenerator-globaltool --version 5.2.0

      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
            name: '${{ env.COVERAGE_REPORT_ARTIFACT }}-${{ github.run_id }}'
            path: ${{ env.SOURCE_PATH }}

      - name: Run ReportGenerator
        shell: bash
        run: |
          reportgenerator \
          "-reports:${{ env.SOURCE_PATH }}/**/*.xml" \
          "-targetdir:${{ env.REPORT_PATH }}" \
          "-reporttypes:Cobertura" \
          "-historydir:${{ env.HISTORY_PATH }}"

      - name: Upload reportgenerator history artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.HISTORY_ARTIFACTS_NAME }}
          path: ${{ env.HISTORY_PATH }}
          retention-days: 1

      - name: Upload reportgenerator results artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.REPORT_ARTIFACTS_NAME }}
          path: ${{ env.REPORT_PATH }}
          retention-days: 1

  calculate-storage-container-name:
    name: 'Calculate Storage Container Name'
    runs-on: ubuntu-latest
    needs: report_generator
    continue-on-error: false
    outputs:
      storage_container_name: ${{ steps.get_container_name.outputs.name }}
    steps:
      - name: Convert GitHub Repository Name to Azure Storage Container name
        id: get_container_name
        run: |
          NAME="${GITHUB_REPOSITORY,,}"
          NAME="${NAME//[^a-zA-Z0-9]/-}"
          echo "name=$NAME" >> $GITHUB_OUTPUT

  persist-coverage-reports:
    needs: calculate-storage-container-name
    uses: ./.github/workflows/az-storage-upload.yml
    with:
      storage-account-name: wintcodecoverage
      storage-container-name: ${{ needs.calculate-storage-container-name.outputs.storage_container_name }}
      artifacts-name: report-generator-history
    secrets: inherit