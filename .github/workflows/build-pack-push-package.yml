name: build-pack-push-package
on:
  workflow_call:
    inputs:
      assembly-url:
        description: 'The path to the assembly that would be packed.'
        required: true
        type: string

      assembly-prefix:
        description: 'The prefix for the build artifacts to sign.'
        required: true
        type: string

    secrets:
      codesigning-cert:
        description: 'The base64 string that represent the code signing certificate.'
        required: true
      codesigning-cert-pwd:
        description: 'The password for the private key of the code signing certificate.'
        required: true
      nuget-read-pat:
        description: 'The Personal Access Token (PAT) used to access the Wintdev internal nuget feed when restoring.'
        required: true
jobs:
  build:
    name: Build (${{ inputs.assembly_url }})
    runs-on: windows-latest
    env:
      WINT_GITHUB_NUGET_SOURCE_URL: 'https://nuget.pkg.github.com/WintDev/index.json'
      CONFIGURATION: release
    permissions:
      packages: write
      contents: read
  
    steps:
      - name: Install net7
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            7.0.x

      - name: Add GitHub Nuget registry
        run: dotnet nuget add source --username WintDev --password ${{ secrets.nuget-read-pat }} --store-password-in-clear-text --name WintDev "${{ env.WINT_GITHUB_NUGET_SOURCE_URL }}"

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install GitVersion (v5.x)
        uses: gittools/actions/gitversion/setup@v0.10.2
        with:
          versionSpec: '5.x'

      - name: Run GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.10.2

      - name: Restore
        run: dotnet restore ${{ inputs.assembly-url }}

      - name: Build
        run: |
          dotnet build ${{ inputs.assembly-url }} --configuration ${{ env.CONFIGURATION }} /p:AssemblyVersion=${{ steps.gitversion.outputs.assemblySemFileVer }} /p:FileVersion=${{ steps.gitversion.outputs.assemblySemFileVer }} /p:InformationalVersion=${{ steps.gitversion.outputs.Sha }} /p:PackageVersion=${{ steps.gitversion.outputs.nuGetVersion }} --no-restore

      - name: Decode Signing Certificate
        run: |
          New-Item -ItemType directory -Path certificate
          Set-Content -Path certificate\codesigning.wint.se.txt -Value '${{ secrets.codesigning-cert }}'
          certutil -decode certificate\codesigning.wint.se.txt certificate\codesigning.wint.se.pfx

      - name: Sign
        run: |
          $items = Get-ChildItem -recurse -file -include @('${{ inputs.assembly-prefix }}*.dll', '${{ inputs.assembly-prefix }}*.exe') -exclude @('*test*.dll')
          foreach($item in $items) {
            & 'c:\progra~2\windows kits\10\App Certification Kit\signtool.exe' sign /debug -f 'certificate\codesigning.wint.se.pfx' -p '${{ secrets.codesigning-cert-pwd }}' -t 'http://timestamp.digicert.com' -fd 'SHA256' $item.FullName
          }

      - name: Pack
        run: |
          dotnet pack ${{ inputs.assembly-url }} --configuration ${{ env.CONFIGURATION }} /p:PackageVersion=${{ steps.gitversion.outputs.nuGetVersion }} --no-build

      - name: Push
        run: |
          dotnet nuget push **/*.nupkg -s ${{ env.WINT_GITHUB_NUGET_SOURCE_URL }} -k ${{ secrets.GITHUB_TOKEN }} --skip-duplicate
