name: build-deploy-container
on:
  workflow_call:
    inputs:
      login-server:
        description: 'The name of the Azure Container Registry. Defaults to wintcontainer.azurecr.io'
        type: string
        default: 'wintcontainer.azurecr.io'
      dockerfile:
        description: 'The location of the dockerfile to build relative to the repository root. The default value is the dockerfile located at the repository root.'
        type: string
        default: 'Dockerfile'
      working-directory:
        description: 'The directory where the docker build would be performed.' 
        type: string

      container-name:
        description: 'The name of the container. If no name is provided, the repository environment variable value is used as the container name.'
        type: string
      tag:
        description: 'The tag for which the cotainer would be pushed to the ACR. If not specified, the tag will be calculated based on the ref.'
        type: string
      environment:
        description: 'The value that would be used as the enviroment environmet variable value. The default value is Production'
        required: true
        type: string
        default: 'Production'

      container-app-name:
        description: 'The name of the Container App that will be created or updated.'
        required: true
        type: string
      container-app-resource-group:
        description: 'The resource group that the Container App will be created in, or currently exists in.'
        required: true
        type: string
      container-app-environment:
        description: 'The name of the Container App environment to use with the application. The default value is based on the environment input value. To use a specific existing environment, specify the resource id of the environment.'
        type: string
        default: ''
      container-app-location:
        description: 'The location that the Container App (and other created resources) will be deployed to. The default value is North Europe.'
        type: string
        default: 'northeurope'
      container-app-env-vars:
        type: string
        description: |
          'A list of environment variable(s) for the container. Space-separated values in 'key=value' format. Use an empty string to clear existing values. Prefix value with 'secretref:' to reference a secret.'
        required: false

    secrets:
      username:
        description: 'Container registry username.'
        required: true
      password:
        description: 'Container registry password'
        required: true
      azure-credentials:
        description: 'The credentials to use to authenticate against azure.'
        required: true
      nuget-read-pat:
        description: 'The Personal Access Token used to access the WintDev internal nuget feed when restoring.'
        required: true

jobs:
  get_tag:
    name: 'Calculate container tag'
    uses: WintDev/actions/.github/workflows/get-container-tag.yml@alpha

  set_tag:
    name: 'Set container tag'
    needs: get_tag
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.calculate_tag.outputs.tag }}
    steps:
      - name: 'Calculate tag'
        id: calculate_tag
        run: |
          TAG=${{ inputs.tag || needs.get_tag.outputs.tag }}
          echo "tag=$TAG" >> $GITHUB_OUTPUT

  get_name:
    name: 'Calculate container name'  
    uses: WintDev/actions/.github/workflows/get-container-name.yml@alpha

  set_name:
    name: 'Set container name'
    needs: get_name
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.calculate_name.outputs.name }}
    steps:
      - name: 'Calculate name'
        id: calculate_name
        run: |
          NAME=${{ inputs.container-name || needs.get_name.outputs.name }}
          echo "name=$NAME" >> $GITHUB_OUTPUT

  push_container:
    name: 'Build and Push docker container'
    needs: [set_tag, set_name]
    uses: WintDev/actions/.github/workflows/build-push-container.yml@alpha
    with:
      login-server: ${{ inputs.login-server }}
      dockerfile: ${{ inputs.dockerfile }}
      working-directory: ${{ inputs.working-directory }}
      container-name: ${{ needs.set_name.outputs.name }}
      tag: ${{ needs.set_tag.outputs.tag }}
    secrets: inherit

  push_container_latest:
    name: 'Build and Push latest docker container'
    if: github.ref == 'refs/heads/main'
    needs: [set_name]
    uses: WintDev/actions/.github/workflows/build-push-container.yml@alpha
    with:
      login-server: ${{ inputs.login-server }}
      dockerfile: ${{ inputs.dockerfile }}
      working-directory: ${{ inputs.working-directory }}
      container-name: ${{ needs.set_name.outputs.name }}
      tag: latest
    secrets: inherit

  get_service_identity:
    uses: WintDev/actions/.github/workflows/get-wint-service-identity.yml@alpha
    name: Get the service identity
    with:
      environment: ${{ inputs.environment }}
    secrets:
      azure-credentials: ${{ secrets.azure-credentials }}

  deploy:
    name: Deploy azure container app
    needs: [push_container, get_service_identity]
    runs-on: ubuntu-latest
    env:
      CONTAINER_APP_ENV_VARS: 'ASPNETCORE_ENVIRONMENT=${{ inputs.environment }} DOTNET_ENVIRONMENT=${{ inputs.environment }}'
      CONTAINER_APP_ENVIRONMENT: ${{ inputs.container-app-environment }}
    steps:
      - name: 'Set production container app environment'
        if: ${{ inputs.container-app-environment == '' && (inputs.environment == 'Production' || inputs.environment == 'production') }}
        shell: bash
        run: |
          echo "CONTAINER_APP_ENVIRONMENT=/subscriptions/${{ vars.AZURE_SUBSCRIPTION }}/resourceGroups/WintContainer/providers/Microsoft.App/managedEnvironments/WintContainerEnvironment" >> $GITHUB_ENV

      - name: 'Set staging container app environment'
        if: ${{ inputs.container-app-environment == '' && inputs.environment != 'Production' && inputs.environment != 'production' }}
        shell: bash
        run: |
          echo "CONTAINER_APP_ENVIRONMENT=/subscriptions/${{ vars.AZURE_SUBSCRIPTION }}/resourceGroups/WintContainer/providers/Microsoft.App/managedEnvironments/WintContainerEnvironmentTest" >> $GITHUB_ENV

      - name: 'Add environment environment variable to container app environment variables'
        if: ${{ inputs.container-app-env-vars != '' }}
        shell: bash
        run: |
          CONTAINER_APP_ENV_VARS="${{ env.CONTAINER_APP_ENV_VARS }} ${{ inputs.container-app-env-vars }}"
          echo "CONTAINER_APP_ENV_VARS=${CONTAINER_APP_ENV_VARS}" >> $GITHUB_ENV

      - name: 'Configure container app environment variables'
        shell: bash
        run: |
          CA_GH_ACTION_CONTAINER_APP_ENVIRONMENT_VARIABLES_ARG="--env-vars ${{ env.CONTAINER_APP_ENV_VARS }}"
          echo "CA_GH_ACTION_CONTAINER_APP_ENVIRONMENT_VARIABLES_ARG=${CA_GH_ACTION_CONTAINER_APP_ENVIRONMENT_VARIABLES_ARG}" >> $GITHUB_ENV

      - name: 'az config'
        shell: bash
        run: az config set extension.use_dynamic_install=yes_without_prompt

      - name: 'az login'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.azure-credentials }}

      - name: 'Deploy container app'
        shell: bash
        run: |
          az containerapp up \
          --name ${{ inputs.container-app-name }} \
          --resource-group ${{ inputs.container-app-resource-group }} \
          --image ${{ needs.push_container.outputs.container_ref }} \
          --environment ${{ env.CONTAINER_APP_ENVIRONMENT }} \
          --location ${{ inputs.container-app-location }} \
          ${{ env.CA_GH_ACTION_CONTAINER_APP_ENVIRONMENT_VARIABLES_ARG }}

      - name: Get Resource ID of the Managed Identity
        id: get_resource_id
        run: |
          resource_id=$(az identity show \
          --name ${{ needs.get_service_identity.outputs.name }} \
          --resource-group ${{ needs.get_service_identity.outputs.rg }} \
          --query id \
          --output tsv)
          echo "resource_id=$resource_id" >> $GITHUB_OUTPUT

      - name: 'Assign managed identity'
        shell: bash
        run: |
          az containerapp identity assign \
          --name ${{ inputs.container-app-name }} \
          --resource-group ${{ inputs.container-app-resource-group }} \
          --user-assigned \
          ${{ steps.get_resource_id.outputs.resource_id }}

  get_managed_identity:
    needs: deploy
    uses: WintDev/actions/.github/workflows/get-managed-identity.yml@alpha
    name: Get the system assigned managed identity
    with:
      resource-group: ${{ inputs.container-app-resource-group }}
      container-app-name: ${{ inputs.container-app-name }}
    secrets:
      azure-credentials: ${{ secrets.azure-credentials }}

  assign-wint-identity-access:
    name: Assign read access to the wint-identity resource group
    needs: get_managed_identity
    runs-on: ubuntu-latest
    steps:
      - name: assign
        shell: bash
        run: |
          az role assignment create --role Reader --assignee-object-id ${{needs.get_managed_id.outputs.principal_id}} --scope /subscriptions/${{ vars.AZURE_SUBSCRIPTION }}/resourceGroups/wint-identity